<a name="programming-model"></a>
## 编程模型

从架构合理性和安全性的角度出发，我们对于如何基于七牛云存储服务开发互联网和移动互联网产品有一系列标准建议。开发者应极力避免违背这些基本原则，以免造成没必要的损失。

### 基本模型

我们建议的基本模型如下：

> TODO：编程模型图。

从该模型图，我们可以看到以下这几个关键组件：

1. 七牛云存储

	以KV结构（即Key-Value，[键值对](http://kb.qiniu.com/xxx)）方式提供的非结构化资源存储服务。向业务服务器提供资源管理服务，向客户端提供资源上传和下载服务。客户端不应向云存储服务直接发起资源管理请求。

1. 业务服务器

	业务服务器是云存储服务的客户需要自行管理和维护的一个或者一组服务器，需要至少提供这几个基本的功能：
	1. 生成各种凭证（参见[安全机制]()）。主要是按需向客户端提供上传和下载凭证。
	1. 管理用户帐号信息。最终用户的管理不应是云存储服务的范畴。云存储服务只管理企业账号。
	1. 管理资源元数据和资源之间的关联关系。
	1. 响应客户端的业务请求，执行业务流程，返回执行结果。
1. 客户端

	客户端是资源的产生方和消费方。结合业务服务器和七牛云存储的内容，客户端才能以期望的布局展示目标资源内容。

关键的几个交互过程：

1. 上传

	客户端在上传资源到云存储之前要先从业务服务器获取一个有效的上传凭证，因此需要先后和两个服务端打交道。
	
	如果有设置回调，则上传

1. 下载

	公有资源因为不需要对应的下载凭证即可访问，客户端可以直接从云存储下载对应资源。私有资源因为需要对应的下载凭证，因此必须先和业务服务器打交道。
	
	按照实际的使用场景，客户端对于内容的展示非常类似于一个动态网页的生成过程，因此无论该页面内容是共有还是私有，均需要从业务服务器获取该展示页面的动态布局信息。所以通常显示过程也是需要先后和业务服务器及云存储服务打交道。

1. 资源管理

	为了安全考虑，资源管理动作只应在业务服务器端进行。如果允许客户端进行资源管理，即使将访问凭证的生成动作放到业务服务器端进行，仍然很容易被第三方截获请求全文，从而导致重放攻击的风险。

### 关键原则

这个模型的关键要点如下：

1. 整个架构中需要一个业务服务器的组件；
1. 无论如何，AK/SK均不得包含在客户端的分发包中，无论是二进制代码中、配置文件中，还是网页中；
1. SK不得在任何场景中在公网上传输，更不得传输到客户端；
1. 业务服务器端应维持一个数据库，用于管理资源的元数据；
1. 业务服务器端应维持一个最终用户的账号信息数据库，因为七牛并不负责管理最终用户信息；
1. 原则上客户端和云存储的交互只应是上传和下载，不应使用任何其他的API；

### 建议做法

1. 对于围绕存储数据的处理算法，可考虑作为自定义数据处理模块；

